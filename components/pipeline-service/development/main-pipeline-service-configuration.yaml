apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-1"
  labels:
    argocd.argoproj.io/managed-by: openshift-gitops
  name: openshift-pipelines
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: chains-secrets-admin
  namespace: openshift-pipelines
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: pac-secret-manager
  namespace: openshift-pipelines
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: pipeline-service-exporter
  namespace: openshift-pipelines
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: metrics-reader
  namespace: openshift-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: chains-secret-admin
  namespace: openshift-pipelines
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - list
  - create
  - get
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-gitops-apply-tekton-config-parameters
rules:
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs:
  - get
  - list
  - patch
  - create
  - delete
- apiGroups:
  - operator.tekton.dev
  resources:
  - tektonconfigs
  verbs:
  - get
  - list
  - patch
  - create
  - delete
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - get
  - list
  - patch
  - create
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-gitops-cronjobs-admin
rules:
- apiGroups:
  - ""
  resourceNames:
  - pac-secret-manager
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - patch
  - create
  - delete
- apiGroups:
  - batch
  resources:
  - cronjobs
  verbs:
  - get
  - list
  - patch
  - create
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-gitops-jobs-admin
rules:
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - get
  - list
  - patch
  - create
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: pac-secret-manager
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - list
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - list
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: pipeline-service-exporter-reader
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - namespaces
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
- apiGroups:
  - tekton.dev
  resources:
  - pipelineruns
  - taskruns
  verbs:
  - get
  - list
  - watch
  - patch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-chains-public-key-viewer
rules:
- apiGroups:
  - ""
  resourceNames:
  - public-key
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-results-service-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: chains-secret-admin
  namespace: openshift-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chains-secret-admin
subjects:
- kind: ServiceAccount
  name: chains-secrets-admin
  namespace: openshift-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-chains-public-key-viewer
  namespace: openshift-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-chains-public-key-viewer
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-gitops-apply-tekton-config-parameters
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openshift-gitops-apply-tekton-config-parameters
subjects:
- kind: ServiceAccount
  name: openshift-gitops-argocd-application-controller
  namespace: openshift-gitops
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-gitops-cronjobs-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openshift-gitops-cronjobs-admin
subjects:
- kind: ServiceAccount
  name: openshift-gitops-argocd-application-controller
  namespace: openshift-gitops
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-gitops-jobs-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openshift-gitops-jobs-admin
subjects:
- kind: ServiceAccount
  name: openshift-gitops-argocd-application-controller
  namespace: openshift-gitops
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: pac-secret-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pac-secret-manager
subjects:
- kind: ServiceAccount
  name: pac-secret-manager
  namespace: openshift-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: pipeline-service-exporter-reader-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pipeline-service-exporter-reader
subjects:
- kind: ServiceAccount
  name: pipeline-service-exporter
  namespace: openshift-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: prometheus-tekton-results-service-metrics-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-results-service-metrics-reader
subjects:
- kind: ServiceAccount
  name: metrics-reader
  namespace: openshift-pipelines
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
    kubernetes.io/service-account.name: metrics-reader
  name: metrics-reader
  namespace: openshift-pipelines
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  labels:
    app: pipeline-metrics-exporter
  name: pipeline-metrics-exporter-service
  namespace: openshift-pipelines
spec:
  ports:
  - name: metrics
    port: 9117
    protocol: TCP
    targetPort: 9117
  selector:
    app: pipeline-metrics-exporter
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
    ignore-check.kube-linter.io/dangling-service: This service is not dangling, it
      exposes metric for an OSP deployment
  labels:
    app: tekton-chains-controller
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: tekton-chains
  name: tekton-chains
  namespace: openshift-pipelines
spec:
  ports:
  - name: metrics
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: tekton-chains
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: pipeline-metrics-exporter
  namespace: openshift-pipelines
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pipeline-metrics-exporter
  template:
    metadata:
      annotations:
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
      labels:
        app: pipeline-metrics-exporter
    spec:
      containers:
      - args:
        - -pprof-address
        - "6060"
        - -zap-log-level=6
        image: quay.io/konflux-ci/pipeline-service-exporter:9d2439c8a77d2ce0527cc5aea3fc6561b7671b48
        name: pipeline-metrics-exporter
        ports:
        - containerPort: 9117
          name: metrics
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 128Mi
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      restartPolicy: Always
      serviceAccountName: pipeline-service-exporter
---
apiVersion: batch/v1
kind: CronJob
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: pac-secret-reaper
  namespace: openshift-pipelines
spec:
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      annotations:
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    spec:
      template:
        metadata:
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
        spec:
          containers:
          - command:
            - /bin/bash
            - -c
            - |
              # Delete "pac-gitauth-*" secrets older than a day
              set -o errexit
              set -o nounset
              set -o pipefail
              for namespace in $(kubectl get namespaces -o name | cut -d/ -f2 | grep -E "\\-tenant$|^tekton-ci$|^konflux-ci$"); do
                echo "$namespace: Cleaning pac-gitauth secrets"
                kubectl get secrets --namespace $namespace -o json | \
                  jq -r '.items[] |
                    select(.metadata.name |
                    startswith("pac-gitauth-")) |
                    select(.metadata.creationTimestamp | fromdateiso8601 < (now - 86400)) |
                    "secret/" + .metadata.name
                  ' | \
                  xargs --max-args 1 --no-run-if-empty kubectl delete -n $namespace
              done
              echo "Done"
            image: registry.redhat.io/openshift4/ose-tools-rhel8@sha256:1054e906ee0183531b401d3c0b0d777cecb25ef95b1c9c48387c6cd7b0e57b9d
            imagePullPolicy: Always
            name: delete-pac-secrets
            resources:
              limits:
                cpu: 200m
                memory: 200Mi
              requests:
                cpu: 10m
                memory: 10Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              seccompProfile:
                type: RuntimeDefault
          restartPolicy: Never
          serviceAccountName: pac-secret-manager
  schedule: '*/10 * * * *'
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "1"
  name: tekton-chains-signing-secret
  namespace: openshift-pipelines
spec:
  template:
    metadata:
      annotations:
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          set -o errexit
          set -o nounset
          set -o pipefail

          namespace="openshift-pipelines"
          secret="signing-secrets"

          cd /tmp

          if [ "$(kubectl get secret "$secret" -n "$namespace" -o jsonpath='{.data}' --ignore-not-found --allow-missing-template-keys)" != "" ]; then
            echo "Signing secret exists and is non-empty."
          else
            # Delete secret/signing-secrets if already exists since by default cosign creates immutable secrets
            kubectl delete secrets "$secret" -n "$namespace" --ignore-not-found=true

            # To make this run conveniently without user input let's create a random password
            RANDOM_PASS=$( openssl rand -base64 30 )

            # Generate the key pair secret directly in the cluster.
            # The secret should be created as immutable.
            echo "Generating k8s secret/$secret in $namespace with key-pair"
            env COSIGN_PASSWORD=$RANDOM_PASS cosign generate-key-pair "k8s://$namespace/$secret"
          fi

          echo "Generating/updating the secret with the public key"
          kubectl create secret generic public-key \
            --namespace "$namespace" \
            --from-literal=cosign.pub="$(
              cosign public-key --key "k8s://$namespace/$secret"
            )" \
            --dry-run=client \
            -o yaml | kubectl apply -f -
        image: quay.io/konflux-ci/appstudio-utils:ab6b0b8e40e440158e7288c73aff1cf83a2cc8a9@sha256:24179f0efd06c65d16868c2d7eb82573cce8e43533de6cea14fec3b7446e0b14
        imagePullPolicy: Always
        name: chains-secret-generation
        resources:
          limits:
            cpu: 100m
            memory: 250Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: chains-secrets-admin
      serviceAccountName: chains-secrets-admin
      terminationGracePeriodSeconds: 30
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: pipeline-service
  namespace: openshift-pipelines
spec:
  endpoints:
  - honorLabels: true
    interval: 15s
    path: /metrics
    port: metrics
    scheme: http
  jobLabel: app
  namespaceSelector:
    matchNames:
    - openshift-pipelines
  selector:
    matchLabels:
      app: pipeline-metrics-exporter
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "1"
  name: tekton-chains-controller
  namespace: openshift-pipelines
spec:
  endpoints:
  - honorLabels: true
    interval: 15s
    path: /metrics
    port: metrics
    scheme: http
  jobLabel: app.kubernetes.io/name
  namespaceSelector:
    matchNames:
    - openshift-pipelines
  selector:
    matchLabels:
      app: tekton-chains-controller
      app.kubernetes.io/component: metrics
      app.kubernetes.io/part-of: tekton-chains
  targetLabels:
  - app
  - app.kubernetes.io/component
  - app.kubernetes.io/part-of
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-results-api
  namespace: openshift-pipelines
spec:
  endpoints:
  - bearerTokenSecret:
      key: token
      name: metrics-reader
    path: /metrics
    port: metrics
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  jobLabel: app.kubernetes.io/name
  selector:
    matchLabels:
      app.kubernetes.io/name: tekton-results-api
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: tekton-results-watcher
  namespace: openshift-pipelines
spec:
  endpoints:
  - bearerTokenSecret:
      key: token
      name: metrics-reader
    path: /metrics
    port: watchermetrics
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  selector:
    matchLabels:
      app.kubernetes.io/name: tekton-results-watcher
---
apiVersion: operator.tekton.dev/v1alpha1
kind: TektonConfig
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: config
spec:
  chain:
    artifacts.oci.storage: oci
    artifacts.pipelinerun.enable-deep-inspection: "true"
    artifacts.pipelinerun.format: in-toto
    artifacts.pipelinerun.storage: oci
    artifacts.taskrun.format: in-toto
    artifacts.taskrun.storage: ""
    options:
      deployments:
        tekton-chains-controller:
          spec:
            template:
              spec:
                containers:
                  - args:
                      - --threads-per-controller=32
                      - --kube-api-qps=50
                      - --kube-api-burst=50
                    name: tekton-chains-controller
    transparency.enabled: "false"
  params:
    - name: createRbacResource
      value: "false"
  pipeline:
    default-service-account: appstudio-pipeline
    enable-api-fields: alpha
    enable-bundles-resolver: true
    enable-cluster-resolver: true
    enable-git-resolver: true
    enable-hub-resolver: true
    enable-step-actions: true
    options:
      configMaps:
        config-logging:
          data:
            loglevel.controller: info
            loglevel.webhook: info
            zap-logger-config: |
              {
                "level": "info",
                "development": false,
                "sampling": {
                  "initial": 100,
                  "thereafter": 100
                },
                "outputPaths": ["stdout"],
                "errorOutputPaths": ["stderr"],
                "encoding": "json",
                "encoderConfig": {
                  "timeKey": "ts",
                  "levelKey": "level",
                  "nameKey": "logger",
                  "callerKey": "caller",
                  "messageKey": "msg",
                  "stacktraceKey": "stacktrace",
                  "lineEnding": "",
                  "levelEncoder": "",
                  "timeEncoder": "iso8601",
                  "durationEncoder": "string",
                  "callerEncoder": ""
                }
              }
        config-defaults:
          data:
            default-container-resource-requirements: |
              default:
                requests:
                  memory: "256Mi"
                  cpu: "100m"
            default-pod-template: |
              nodeSelector:
                konflux-ci.dev/workload: konflux-tenants
              tolerations:
                - key: konflux-ci.dev/workload
                  operator: "Equal"
                  value: "konflux-tenants"
                  effect: "NoSchedule"
            default-timeout-minutes: "120"
      deployments:
        tekton-operator-proxy-webhook:
          spec:
            replicas: 2
            template:
              spec:
                containers:
                  - name: proxy
                    resources:
                      limits:
                        cpu: 500m
                        memory: 500Mi
                      requests:
                        cpu: 100m
                        memory: 100Mi
        tekton-pipelines-remote-resolvers:
          spec:
            replicas: 2
        tekton-pipelines-webhook:
          spec:
            template:
              spec:
                containers:
                  - name: webhook
                    resources:
                      limits:
                        cpu: "1"
                        memory: 1Gi
                      requests:
                        cpu: 200m
                        memory: 200Mi
      disabled: false
      horizontalPodAutoscalers:
        tekton-operator-proxy-webhook:
          spec:
            maxReplicas: 6
            metrics:
              - resource:
                  name: cpu
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
              - resource:
                  name: memory
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
            minReplicas: 2
        tekton-pipelines-webhook:
          spec:
            maxReplicas: 6
            metrics:
              - resource:
                  name: cpu
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
              - resource:
                  name: memory
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
            minReplicas: 2
    performance:
      buckets: 4
      disable-ha: false
      kube-api-burst: 50
      kube-api-qps: 50
      replicas: 2
      threads-per-controller: 32
  platforms:
    openshift:
      pipelinesAsCode:
        enable: true
        options:
          deployments:
            pipelines-as-code-watcher:
              spec:
                replicas: 2
            pipelines-as-code-webhook:
              spec:
                replicas: 2
  profile: all
  pruner:
    disabled: true
  targetNamespace: openshift-pipelines
  trigger:
    options:
      configMaps:
        config-logging-triggers:
          data:
            loglevel.controller: info
            loglevel.eventlistener: info
            loglevel.webhook: info
            zap-logger-config: |
              {
                "level": "info",
                "development": false,
                "sampling": {
                  "initial": 100,
                  "thereafter": 100
                },
                "outputPaths": ["stdout"],
                "errorOutputPaths": ["stderr"],
                "encoding": "json",
                "encoderConfig": {
                  "timeKey": "ts",
                  "levelKey": "level",
                  "nameKey": "logger",
                  "callerKey": "caller",
                  "messageKey": "msg",
                  "stacktraceKey": "stacktrace",
                  "lineEnding": "",
                  "levelEncoder": "",
                  "timeEncoder": "iso8601",
                  "durationEncoder": "string",
                  "callerEncoder": ""
                }
              }
---
apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: custom-operators
  namespace: openshift-marketplace
spec:
  displayName: custom-operators
  image: quay.io/openshift-pipeline/openshift-pipelines-pipelines-operator-bundle-container-index@sha256:7444d41ebe811a505866a99a92e24ca390677835dfdd597bed2e0b5d66780c5b
  sourceType: grpc
  updateStrategy:
    registryPoll:
      interval: 30m
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-pipelines-operator
  namespace: openshift-operators
spec:
  channel: pipelines-5.0
  name: openshift-pipelines-operator-rh
  source: custom-operators
  sourceNamespace: openshift-marketplace
  config:
    env:
      - name: AUTOINSTALL_COMPONENTS
        value: "false"
---
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: false
allowPrivilegedContainer: false
allowedCapabilities:
- SETFCAP
apiVersion: security.openshift.io/v1
defaultAddCapabilities: null
fsGroup:
  type: MustRunAs
groups:
- system:cluster-admins
kind: SecurityContextConstraints
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
  name: appstudio-pipelines-scc
priority: 10
readOnlyRootFilesystem: false
requiredDropCapabilities:
- MKNOD
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
users: []
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
---
apiVersion: operator.tekton.dev/v1alpha1
kind: TektonResult
metadata:
  name: result
spec:
  targetNamespace: openshift-pipelines
  logs_api: true
  log_level: debug
  db_port: 5432
  db_host: tekton-results-postgres-service.openshift-pipelines.svc.cluster.local
  db_sslmode: disable
  logs_path: /logs
  logs_type: File
  logs_buffer_size: 5242880
  auth_disable: true
  db_enable_auto_migration: true
  server_port: 8080
  options:
    deployments:
      tekton-results-watcher:
        spec:
          template:
            spec:
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                          - key: kubernetes.io/os
                            operator: NotIn
                            values:
                              - windows
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - podAffinityTerm:
                        labelSelector:
                          matchLabels:
                            app.kubernetes.io/name: tekton-results-watcher
                        topologyKey: kubernetes.io/hostname
                      weight: 100
              containers:
              - name: watcher
                args:
                  - -api_addr
                  - tekton-results-api-service.openshift-pipelines.svc.cluster.local:8080
                  - -auth_mode
                  - token
                  - -check_owner=false
                  - -completed_run_grace_period=2h
                env:
                  - name: SYSTEM_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  - name: CONFIG_LOGGING_NAME
                    value: tekton-results-config-logging
                  - name: CONFIG_LEADERELECTION_NAME
                    value: tekton-results-config-leader-election
                  - name: CONFIG_OBSERVABILITY_NAME
                    value: tekton-results-config-observability
                  - name: METRICS_DOMAIN
                    value: tekton.dev/results
                  - name: TEKTON_RESULTS_API_SERVICE
                    value: tekton-results-api-service.openshift-pipelines.svc.cluster.local:8080
                  - name: AUTH_MODE
                    value: token
                ports:
                  - containerPort: 9090
                    name: metrics
                  - containerPort: 8008
                    name: profiling
                resources:
                  limits:
                    cpu: 250m
                    memory: 2Gi
                  requests:
                    cpu: 100m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                      - ALL
                  readOnlyRootFilesystem: true
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                volumeMounts:
                  - mountPath: /etc/tls
                    name: tls
                    readOnly: true
              - args:
                  - --secure-listen-address=0.0.0.0:8443
                  - --upstream=http://127.0.0.1:9090/
                  - --logtostderr=true
                  - --v=6
                image: registry.redhat.io/openshift4/ose-kube-rbac-proxy:v4.12
                name: kube-rbac-proxy
                ports:
                  - containerPort: 8443
                    name: watchermetrics
                    protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 5m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                      - ALL
                  readOnlyRootFilesystem: true
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
              serviceAccountName: tekton-results-watcher
              volumes:
                - name: tls
                  secret:
                    secretName: tekton-results-tls
      tekton-results-api:
        spec:
          template:
            spec:
              containers:
              - name: api
                env:
                - name: LOGS_API
                  value: "true"
                - name: LOGS_TYPE
                  value: S3
                - name: S3_HOSTNAME_IMMUTABLE
                  value: "true"
                - name: S3_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      key: aws_access_key_id
                      name: tekton-results-s3
                - name: S3_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_secret_access_key
                      name: tekton-results-s3
                - name: S3_REGION
                  valueFrom:
                    secretKeyRef:
                      key: aws_region
                      name: tekton-results-s3
                - name: S3_BUCKET_NAME
                  valueFrom:
                    secretKeyRef:
                      key: bucket
                      name: tekton-results-s3
                - name: S3_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      key: endpoint
                      name: tekton-results-s3
                - name: DB_USER
                  valueFrom:
                    secretKeyRef:
                      key: db.user
                      name: tekton-results-database
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: db.password
                      name: tekton-results-database
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      key: db.user
                      name: tekton-results-database
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: db.password
                      name: tekton-results-database
                - name: DB_HOST
                  valueFrom:
                    secretKeyRef:
                      key: db.host
                      name: tekton-results-database
                - name: DB_NAME
                  valueFrom:
                    secretKeyRef:
                      key: db.name
                      name: tekton-results-database
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8080
                    scheme: HTTPS
                  initialDelaySeconds: 5
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /healthz
                    port: 8080
                    scheme: HTTPS
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 100m
                    memory: 512Mi
                  requests:
                    cpu: 100m
                    memory: 512Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
                  readOnlyRootFilesystem: true
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                startupProbe:
                  failureThreshold: 10
                  httpGet:
                    path: /healthz
                    port: 8080
                    scheme: HTTPS
                  initialDelaySeconds: 5
                  periodSeconds: 10
                volumeMounts:
                - mountPath: /etc/ssl/certs/s3-cert.crt
                  name: ca-s3
                  subPath: s3-cert.crt
                - mountPath: /etc/tls/db
                  name: db-tls-ca
                  readOnly: true
                - mountPath: /etc/tekton/results
                  name: config
                  readOnly: true
                - mountPath: /etc/tls
                  name: tls
                  readOnly: true
              - args:
                - --secure-listen-address=0.0.0.0:9443
                - --upstream=http://127.0.0.1:9090/
                - --logtostderr=true
                - --v=6
                image: registry.redhat.io/openshift4/ose-kube-rbac-proxy:v4.12
                name: kube-rbac-proxy
                ports:
                - containerPort: 9443
                  name: metrics
                  protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 5m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
                  readOnlyRootFilesystem: true
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
              initContainers:
              - args:
                - -c
                - |
                  mc --config-dir /tmp config host add minio "$S3_ENDPOINT" "$S3_ACCESS_KEY_ID" "$S3_SECRET_ACCESS_KEY" &&
                  if [ -z "$(mc --config-dir /tmp ls minio | grep "$S3_BUCKET_NAME")" ]; then
                    mc --config-dir /tmp mb --with-lock --region "$S3_REGION" minio/"$S3_BUCKET_NAME" &&
                    echo "Minio bucket $S3_BUCKET_NAME successfully created."
                  fi
                command:
                - /bin/bash
                env:
                - name: S3_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      key: aws_access_key_id
                      name: tekton-results-s3
                - name: S3_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_secret_access_key
                      name: tekton-results-s3
                - name: S3_REGION
                  valueFrom:
                    secretKeyRef:
                      key: aws_region
                      name: tekton-results-s3
                - name: S3_BUCKET_NAME
                  valueFrom:
                    secretKeyRef:
                      key: bucket
                      name: tekton-results-s3
                - name: S3_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      key: endpoint
                      name: tekton-results-s3
                image: quay.io/minio/mc:RELEASE.2023-01-28T20-29-38Z
                imagePullPolicy: Always
                name: mc
                resources:
                  limits:
                    cpu: 100m
                    memory: 128Mi
                  requests:
                    cpu: 5m
                    memory: 32Mi
                securityContext:
                  readOnlyRootFilesystem: true
                  runAsNonRoot: true
                volumeMounts:
                - mountPath: /etc/ssl/certs/s3-cert.crt
                  name: ca-s3
                  subPath: s3-cert.crt
                - mountPath: /tmp
                  name: tmp-mc-volume
              serviceAccountName: tekton-results-api
              volumes:
              - name: ca-s3
                secret:
                  items:
                  - key: public.crt
                    path: s3-cert.crt
                  secretName: storage-tls
              - emptyDir: {}
                name: tmp-mc-volume
              - configMap:
                  name: rds-root-crt
                name: db-tls-ca
              - configMap:
                  name: tekton-results-api-config
                name: config
              - name: tls
                secret:
                  secretName: tekton-results-tls
